function findTransitionFlux(embeddingValues)
%findTransitionFlux finds the transition flux of the states generated by watershed on the
%embedding space


if (nargin<1)
    load('embeddingValues_RPYV_noTrain_1200.mat','embeddingValues');
end


maxVal = max(max(abs(combineCells(embeddingValues))));
maxVal = round(maxVal * 1.1);

sigma = maxVal / 40;
numPoints = 501;
rangeVals = [-maxVal maxVal];


%% Plot watershed
[~,density] = findPointDensity(combineCells(embeddingValues),sigma,numPoints,rangeVals);
img_afterWatershed = watershed(0-density);
density(img_afterWatershed == 0) = NaN;
imAlpha=ones(size(density));
imAlpha(isnan(density))=0;
imagesc(density,'AlphaData',imAlpha);
axis equal tight off xy
h = colorbar;
ylabel(h, 'PDF','FontSize', 15);
maxDensity_Watershed = max(density(:));
caxis([0 maxDensity_Watershed * .8]);
set(gcf, 'Position', [100 60 1000 1000]);
hold on;

%% Labeled Image after Watershed
labeledImage = bwlabel(img_afterWatershed);

%% Find the local maximum of each region
fprintf(1,'\t Find the local maximum of each watershed regions\n');
for i = 1:max(max(labeledImage))
    i
    [points(i,2),points(i,1)] = find(density == max(max(density(labeledImage == i))));
    plot(points(i,1),points(i,2), 'color',[0 1 0 0],'marker', 'o','markerfacecolor','r','markeredgecolor','r','markersize',5,'linewidth',3);
end

%% Find the state sequence
tempR = labeledImage;

b = bwboundaries(tempR);
for i = 1: length(b)
    for j = 1 : length(b{i})
        x = b{i}(j,1);
        y = b{i}(j,2);
        tempR(x,y+1) = i;
        tempR(x+1,y) = i;
        tempR(x+1,y+1) = i;
    end
end

fprintf(1,'\t Find the state sequence\n');
stateSequence = findStateSequence(embeddingValues,tempR);

%% Find transition sequence
transitionSequence = findTransitionSequence(stateSequence);

%% Find the Markov Chain Matrix
numStates = max(max(labeledImage));
% Threshold for all the trials
threshold = 0.05;
% % Threshold for each stiffness
% threshold = 0.25
P = findMarkov(transitionSequence,numStates,threshold);


%% Draw the transition between each states
fprintf(1,'\t Draw the transition between each watershed regions\n');
for i = 1:length(P)
    for j = 1:length(P)
        if P(i,j) > 0
            Linewidth = P(i,j)*5;
            drawCurvedArrow(points(i,:),points(j,:),0.15,'true',Linewidth);
        end
    end
end

hold off;

%% Plot the transition Matrix

figure;
imagesc(P);
colormap(gray);
xlabel('Final State','fontweight','bold','fontsize',25);
ylabel('Initial State','fontweight','bold','fontsize',25);
set(gcf, 'Position', [50 50 1200 1200])


end

